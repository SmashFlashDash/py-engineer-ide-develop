"""
ИСП ЭМС ЧАСТЬ 1 НАСТРОЙКА РЭС
  - МКА полность собран, установлен на диэлектрическую подставку для БЭК ОМ67.91.22.000 и размещен на поворотном круге в БЭК1 так,
    чтобы его ось –Y была направлена на АИК; антенна АФУ-Х направлена в «зенит» в соответствии с ИВЯФ.464655.033РЭ и закреплена в этом положении
    с помощью приспособления для фиксация АФУ-Х ТАИК.301318.026 в соответствии с его ТАИК.410114.001 РЭ; разъемы Х3 и Х4 АФУ-Х расстыкованы;
    выполнить работы с АФУ Ku в соответствии с РЭ на БСК с тем, чтобы его диаграмма была направлена на АИК;
  - собрана схема Э6.2;
  - РМ включено согласно ОМ66.81.00.000 РЭ;
  - внешние ворота БЭК закрыты и прижаты;
  - МКА включен по ИЭ17.2 в следуещем варианте: питание от ИГБФ, БА КИС в ДР.
"""
# DEBUG
from time import sleep as sleep2
import time
time.sleep = lambda *args: sleep2(0)
sleep = lambda *args: sleep2(0)
# Импорт зависимостей на винде
import sys
sys.path.insert(0, '../../lib/')
from engineers_src.tools.tools import *


import traceback
# Импорт с другой папки
# sys.path.insert(0, 'F:/VMShared/ivk-scripts/')  # путь к программе испытаний абсолютный
# DIstorage = None
# windowChooser = None
# sendFromJson = None
# doEquation = None
# executeTMI = None
# exec('from Dictionaries_UVDI import *')
# exec('from EMSRLCI_foos import windowChooser, sendFromJson, doEquation, executeTMI, getAndSleep, executeDI')

# Импорт с рабочей директории скрипта
from engineers_src.for_RLCI_EMS.EMSRLCI_foos import windowChooser, sendFromJson, doEquation, executeTMI, print_start_and_end
from engineers_src.for_RLCI_EMS.DeviceClasses import DIstorage, BCK, MB, KIS, RLCI, ASN, ZD, BSPA, BSK_P, BSK_KU, DUK, KSO


##################### COMMUTATIONS ############################
DIstorage.commute('M778B', False)
MB.cur = 1
KIS.barl_names['1/2'] = None
KIS.barl_names['2/2'] = None
KIS.barl_names['3/4'] = None
KIS.barl_names['4/4'] = None


#####################    TESTS ###############################
def TEST_DESCRIPTION():
    print(Text.yellow + "БАРЛ ВСЕ МПРД" + Text.default + ": ИЗМЕРИТЬ МИНИМАЛЬНУЮ МОЩНОСТЬ КПА;")


def TEST_senseKIS():
    """Тест настройки мощности КПА КИС
    входит в СР по очереди на разных БАРЛ, меняет мощност КПА к минимуму, проверяет прохождение команд"""
    print()
    yprint('НАСТРОЙКА РЛ КИС И ЗАМЕР ИСХОДНОЙ ЧУВСТВИТЕЛЬНОСТИ ПРМ1', tab=2)
    KIS.mode_SR('1/2')
    KIS.conn_DI()
    KIS.sens(5)
    KIS.mode_DR()
    print()
    yprint('НАСТРОЙКА РЛ КИС И ЗАМЕР ИСХОДНОЙ ЧУВСТВИТЕЛЬНОСТИ ПРМ2', tab=2)
    KIS.mode_SR('2/2')
    KIS.conn_DI()
    KIS.sens(5)
    KIS.mode_DR()
    print()
    yprint('НАСТРОЙКА РЛ КИС И ЗАМЕР ИСХОДНОЙ ЧУВСТВИТЕЛЬНОСТИ ПРМ3', tab=2)
    KIS.mode_SR('3/4')
    KIS.conn_DI()
    KIS.sens(5)
    KIS.mode_DR()
    print()
    yprint('НАСТРОЙКА РЛ КИС И ЗАМЕР ИСХОДНОЙ ЧУВСТВИТЕЛЬНОСТИ ПРМ4', tab=2)
    KIS.mode_SR('4/4')
    KIS.conn_DI()
    KIS.sens(5)
    KIS.mode_DR()
    comm_print("Полученные значения мощности:")
    KIS.print_BARL_levels()


#####################     MAIN      ###########################
print()
# словрь с функциями для кнопок
foo = {
    'ОЧИСТ НАКОПИТЕЛЬ': lambda: BCK.clc_BCK(),
    'СБРОС НАКОПИТЕЛЬ': lambda: BCK.downBCK(),
    'БАРЛ СР': lambda: windowChooser(
        btnsText=('1/2', '2/2', '3/4', '4/4'),
        title='БАРЛ В СР',
        fooDict={
            '1/2': lambda: KIS.mode_SR('1/2'),
            '2/2': lambda: KIS.mode_SR('2/2'),
            '3/4': lambda: KIS.mode_SR('3/4'),
            '4/4': lambda: KIS.mode_SR('4/4')},
        ret_btn=True),
    'БАРЛ УСТ КПА': lambda: KIS.set_KPA_level(),
    'БАРЛ ДР': lambda: KIS.mode_DR(),
    'БАРЛ ИзмУр КПА': lambda: KIS.sens(5),
    'БАРЛ ТЕСТ ПРИЕМА': lambda: [x for x in (KIS.conn_DI(), sleep(5), KIS.conn_test(5))],
    'УВРОНИ КПА': lambda: KIS.print_BARL_levels(),
    'ПОТОК SOTC': lambda: KIS._barl_run(),
    'АСН ВКЛ': lambda: windowChooser(
        btnsText=('1', '2'),
        title='АСН ВКЛ',
        fooDict={
            '1': lambda: ASN.on(1),
            '2': lambda: ASN.on(2)},
        ret_btn=True),
    'АСН ВЫКЛ': lambda: windowChooser(
        btnsText=('1', '2'),
        title='АСН ВЫКЛ',
        fooDict={
            '1': lambda: ASN.off(1),
            '2': lambda: ASN.off(2)},
        ret_btn=True),
    'АСН ПРОВ СИГНАЛ': lambda: ASN.check_sm_output(ASN.cur_block),
    'АСН КОНТРОЛЬ РАБОТЫ': lambda: ASN.res_control(ASN.cur_block),
    'РЛЦИ БА': lambda: windowChooser(
        btnsText=('ОСН', 'РЕЗ', 'ОТКЛ'),
        title='РЛЦИ ПОД ПИТАНИЕ',
        fooDict={
            'ОСН': lambda: RLCI.power_on_ea332(1),
            'РЕЗ': lambda: RLCI.power_on_ea332(2),
            'ОТКЛ': lambda: RLCI.power_off_ea332()},
        ret_btn=True),
    'РЛЦИ ПЧ': lambda: windowChooser(
        btnsText=('ОСН', 'РЕЗ', 'ОТКЛ'),
        title='РЛЦИ ПЧ',
        fooDict={
            'ОСН': lambda: RLCI.on_PCH(1),
            'РЕЗ': lambda: RLCI.on_PCH(2),
            'ОТКЛ': lambda: RLCI.off_PCH()},
        ret_btn=True),
    'РЛЦИ ФИП': lambda: windowChooser(
        btnsText=('ОСН', 'РЕЗ', 'ОТКЛ'),
        title='РЛЦИ ФИП',
        fooDict={
            'ОСН': lambda: RLCI.on_FIP(1),
            'РЕЗ': lambda: RLCI.on_FIP(2),
            'ОТКЛ': lambda: RLCI.off_FIP()},
        ret_btn=True),
    'РЛЦИ МОД': lambda: windowChooser(
        btnsText=('ОСН', 'РЕЗ', 'ОТКЛ'),
        title='РЛЦИ МОД',
        fooDict={
            'ОСН': lambda: RLCI.on_MOD(1),
            'РЕЗ': lambda: RLCI.on_MOD(2),
            'ОТКЛ': lambda: RLCI.off_MOD()},
        ret_btn=True),
    'РЛЦИ УМ': lambda: windowChooser(
        btnsText=('ОСН', 'РЕЗ', 'ОТКЛ'),
        title='РЛЦИ УМ',
        fooDict={
            'ОСН': lambda: RLCI.on_UM(1),
            'РЕЗ': lambda: RLCI.on_UM(2),
            'ОТКЛ': lambda: RLCI.off_UM()}),
    'РЛЦИ РЕЖИМ': lambda: windowChooser(
        btnsText=(('M1', 'M2', 'M3', 'M4'), ('VS1', 'VS2')),
        title='РЛЦИ УМ',
        fooDict={'M1': lambda: RLCI.mode('M1'),
                 'M2': lambda: RLCI.mode('M2'),
                 'M3': lambda: RLCI.mode('M3'),
                 'M4': lambda: RLCI.mode('M4'),
                 'VS1': lambda: RLCI.mode('VS1'),
                 'VS2': lambda: RLCI.mode('VS2')},
        ret_btn=True),
    'РЛЦИ ОТКЛ ВСЕ': lambda: RLCI.off_all(),
    'M778': lambda: windowChooser(
            btnsText=(('ВКЛ А', 'ВКЛ Б'), 'ОТКЛ'),
            title='ПИТАНИЕ М778',
            fooDict={'ВКЛ А': lambda: MB.power_on(1),
                     'ВКЛ Б': lambda: MB.power_on(2),
                     'ОТКЛ': lambda: MB.off()},
            ret_btn=True),
    'ЗД ВКЛ': lambda: windowChooser(
        btnsText=(('1', '2', '3', '4'),),
        title='ВКЛЮЧИТЬ ЗД',
        fooDict={'1': lambda: ZD.on_ZD(1),
                 '2': lambda: ZD.on_ZD(2),
                 '3': lambda: ZD.on_ZD(3),
                 '4': lambda: ZD.on_ZD(4)},
        ret_btn=True),
    'ЗД ОТКЛ': lambda: windowChooser(
        btnsText=(('1', '2', '3', '4'),),
        title='ОТКЛЮЧИТЬ ЗД',
        fooDict={'1': lambda: ZD.off_ZD(1),
                 '2': lambda: ZD.off_ZD(2),
                 '3': lambda: ZD.off_ZD(3),
                 '4': lambda: ZD.off_ZD(4)},
        ret_btn=True),
    'ОПРОС ТОК': lambda: ZD.ask_current_zd(),
    'Им ЗД ВКЛ': lambda: ZD.on_imitators(),
    'Им ЗД ОТКЛ': lambda: ZD.off_imitators(),
    'ПРОВ ОРИЕНТ': lambda: windowChooser(
        btnsText=(('1', '2', '3', '4'),),
        title='ПРОВЕРИТЬ ОРИЕНТАЦИЮ ЗД',
        fooDict={'1': lambda: ZD.quaternion_orentation(1),
                 '2': lambda: ZD.quaternion_orentation(2),
                 '3': lambda: ZD.quaternion_orentation(3),
                 '4': lambda: ZD.quaternion_orentation(4)},
        ret_btn=True),
    'ОПИСАНИЕ ТЕСТОВ': lambda: TEST_DESCRIPTION(),
    'АВТОМАТИЗ ТЕСТЫ': lambda: windowChooser(
        btnsText=('ИЗМ P БАРЛ',),
        title='АВТОМАТИЗ ТЕСТЫ',
        fooDict={'ИЗМ P БАРЛ': lambda: TEST_senseKIS()},
        ret_btn=True)
}
# кнопки
btns = (('ОЧИСТ НАКОПИТЕЛЬ', 'СБРОС НАКОПИТЕЛЬ'),
        'M778',
        ('БАРЛ СР', 'БАРЛ УСТ КПА', 'БАРЛ ДР', 'БАРЛ ИзмУр КПА', 'БАРЛ ТЕСТ ПРИЕМА', 'ПОТОК SOTC', 'УВРОНИ КПА'),
        ('АСН ВКЛ', 'АСН ВЫКЛ', 'АСН ПРОВ СИГНАЛ', 'АСН КОНТРОЛЬ РАБОТЫ'),
        ('РЛЦИ БА', 'РЛЦИ ПЧ', 'РЛЦИ ФИП', 'РЛЦИ МОД', 'РЛЦИ УМ', 'РЛЦИ РЕЖИМ', 'РЛЦИ ОТКЛ ВСЕ'),
        ('ЗД ВКЛ', 'ЗД ОТКЛ', 'Им ЗД ВКЛ', 'Им ЗД ОТКЛ', 'ПРОВ ОРИЕНТ', 'ОПРОС ТОК'),
        ('ОПИСАНИЕ ТЕСТОВ', 'АВТОМАТИЗ ТЕСТЫ'))
print()
yprint('ИСПЫТАНИЕ: АИП ИСПЫТАНИЙ МКА НА ЭМС ЧАСТЬ 1 НАСТРОЙКА РЭС', tab=3)
# KIS._barl_run()     # запустить поток SOTC
while True:
    print()
    try:
        windowChooser(btnsText=btns, fooDict=foo, labels=['БЦК', 'M778', 'БАРЛ', 'АСН', 'РЛЦИ', 'ЗД', 'CMD'])
    except Exception as ex:
        rprint("ОШИБКА В ТЕСТЕ")
        rprint(traceback.format_exc())

# начать с АСН, включить имитатор и асн, посмотреть что он поймал от 4 спутниклов
# выдвать команды на КИС смотреть есть ли влияние на навигацию
# КАМЕРА ПРИБОРЫ ОРИЕНТАЦИИ
#

# сначала АСН - включается проверяется прием на КИС и на АСН

# включать всю целлевую
# yprint('НАСТРОЙКА РЛ РЛЦИВ', tab=2)
# Ex.send('КПА', KPA('Мощность-уст', KA_Status.barl_names['1\\2']))  # установить настроенную мощность КПА
# KIS.mode_SR(nbarl='1\\2')
# KIS.validateConn()
# # Код для РЛЦИ-В
# KIS.mode_DR()
# print()
#
# # работа КИС
# sleep(40)
#
# print()
# #KIS.mode_standby()      # БАРЛ в ДР
# sleep(20)

# KIS_measure_sensitivity(1, n_SOTC=5, started=started_KIS_session, add_sensitive=0)  # замер чувствт КИС
# KIS.mode_standby(1)  # БАРЛ в дужерный режим