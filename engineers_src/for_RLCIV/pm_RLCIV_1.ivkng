# # DEBUG
# from time import sleep as sleep2
# import time
# time.sleep = lambda *args: sleep2(0)
# sleep = lambda *args: sleep2(0)
# # Импорт зависимостей
# import sys
# sys.path.insert(0, '../../lib/')
# from engineers_src.tools.tools import *

import traceback
# Импорт с другой папки
# sys.path.insert(0, 'F:/VMShared/ivk-scripts/')  # путь к программе испытаний абсолютный
# DIstorage = None
# windowChooser = None
# sendFromJson = None
# doEquation = None
# executeTMI = None
# exec('from Dictionaries_UVDI import DIstorage')
# exec('from EMSRLCI_foos import windowChooser, sendFromJson, doEquation, executeTMI')
# Импорт с рабочей директории скрипта
from engineers_src.for_RLCIV.Dictionaries_UVDI import DIstorage
from engineers_src.for_RLCIV.EMSRLCI_foos import windowChooser, sendFromJson, doEquation, executeTMI
from engineers_src.for_RLCIV.DeviceClasses import KIS, RLCI, MB


# TODO:
#  - поток на продление сеанса при запуске проги, должен не вседа продлевать
#    а предлагать переключить комплект
#  - переделать команды ВКЛ ЭА331 ЭА332 на команды БЦК
#  - сеансы в БД с тестом РЛЦИ 6182, 6223, 6181
#    SELECT * FROM dbo.tm
#    WHERE value->>'name' IN ('10.01.BA_FIP1', '10.01.BA_MOD1', '10.01.BA_PCH1', '10.01.BA_UM1') AND value->'value' = '0'
#    ORDER BY tmid ASC LIMIT 100
##################### COMMUTATIONS ############################
DIstorage.commute('M778B', False)
MB.cur = 1


############################### TESTS ########################################
def TEST_5():
    yprint('ТЕСТ 5: БА-О(ЭА332), ПЧ-О(ЭА331), ФИП-О(ЭА330), МОД-О(ЭА331), УМ-О(ЭА331)', 1)
    RLCI.power_on_ea332(1)
    RLCI.power_on_ea331(1)
    RLCI.mode('RS485-1')    # RS485-0
    RLCI.on_PCH(1)          # Вкл ПЧ-О
    RLCI.on_FIP(1)          # Вкл ФИП-О
    RLCI.on_MOD(1)          # Вкл МОД-О
    RLCI.on_UM(1)           # Вкл УМ-О
    RLCI.mode('VS1')        # Уст Симв Скор VS1
    RLCI.mode('M1')         # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS1')
    RLCI.mode('M2')         # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS1')
    RLCI.mode('M3')         # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS1')
    RLCI.mode('M4')         # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS1')
    RLCI.mode('RS485-2')    # RS485-Р
    RLCI.mode('on imFIP')   # Вкл ИМ-ФИП
    RLCI.mode('M1')         # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS1 включен ИМ-ФИП')
    RLCI.mode('M2')         # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS1 включен ИМ-ФИП')
    RLCI.mode('M3')         # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS1 включен ИМ-ФИП')
    RLCI.mode('M4')         # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS1 включен ИМ-ФИП')
    RLCI.off_UM()           # Откл УМ
    RLCI.off_MOD()          # Откл Мод
    RLCI.off_FIP()          # Откл Фип
    RLCI.off_PCH()          # Откл Пч
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 5 ЗВЕРШЕН', 1)


def TEST_6(ea332=1):
    yprint('ТЕСТ 6: БА-О(ЭА332), ПЧ-Р(ЭА331), ФИП-Р(ЭА330), МОД-Р(ЭА331), УМ-Р(ЭА331)', 1)
    RLCI.power_on_ea332(ea332)
    RLCI.power_on_ea331(2)
    RLCI.mode('RS485-1')    # RS485-0
    RLCI.on_PCH(2)          # Вкл ПЧ-Р
    RLCI.on_FIP(2)          # Вкл ФИП-Р
    RLCI.on_MOD(2)          # Вкл МОД-Р
    RLCI.on_UM(2)           # Вкл УМ-Р
    RLCI.mode('VS2')        # Уст Симв Скор VS2
    RLCI.mode('M1')         # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS2')
    RLCI.mode('M2')         # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS2')
    RLCI.mode('M3')         # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS2')
    RLCI.mode('M4')         # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS2')
    RLCI.mode('RS485-2')    # RS485-Р
    RLCI.mode('on imFIP')   # Вкл ИМ-ФИП
    RLCI.mode('M1')         # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS2 включен ИМ-ФИП')
    RLCI.mode('M2')         # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS2 включен ИМ-ФИП')
    RLCI.mode('M3')         # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS2 включен ИМ-ФИП')
    RLCI.mode('M4')         # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS2 включен ИМ-ФИП')
    RLCI.off_UM()           # Откл УМ
    RLCI.off_MOD()          # Откл Мод
    RLCI.off_FIP()          # Откл Фип
    RLCI.off_PCH()          # Откл Пч
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 6 ЗВЕРШЕН', 1)


def TEST_7():
    yprint('ТЕСТ 7: БА-Р(ЭА332), ПЧ-О(ЭА331), ФИП-О(ЭА330), МОД-Р(ЭА331), УМ-Р(ЭА331)', 1)
    RLCI.power_on_ea332(2)
    RLCI.power_on_ea331(2)
    RLCI.mode('RS485-1')        # RS485-0
    RLCI.on_PCH(1)              # Вкл ПЧ-О
    RLCI.on_FIP(1)              # Вкл ФИП-О
    RLCI.on_MOD(2)              # Вкл МОД-Р
    RLCI.on_UM(2)               # Вкл УМ-Р
    RLCI.mode('VS1')            # Уст Симв Скор VS1
    RLCI.mode('M1')             # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS1')
    RLCI.mode('M2')             # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS1')
    RLCI.mode('M3')             # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS1')
    RLCI.mode('M4')             # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS1')
    RLCI.mode('on imFIP')       # Вкл ИМ-ФИП
    RLCI.mode('RS485-1')        # RS485-0             # TODO: был же основной
    RLCI.mode('off imFIP')      # Откл ИМ-Фип
    RLCI.mode('on imMOD')       # Вкл ИМ-Мод
    RLCI.mode('off imMOD')      # Откл ИМ-Мод
    RLCI.off_UM()               # Откл УМ
    RLCI.off_MOD()              # Откл Мод
    RLCI.off_FIP()              # Откл Фип
    RLCI.off_PCH()              # Откл Пч
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 7 ЗВЕРШЕН', 1)


def TEST_8():
    yprint('ТЕСТ 8: БА-Р(ЭА332), ПЧ-Р(ЭА331), ФИП-Р(ЭА330), МОД-О(ЭА331), УМ-О(ЭА331)', 1)
    RLCI.power_on_ea332(2)
    RLCI.power_on_ea331(2)
    RLCI.mode('RS485-1')    # RS485-0
    RLCI.on_PCH(2)          # Вкл ПЧ-Р
    RLCI.on_FIP(2)          # Вкл ФИП-Р
    RLCI.on_MOD(1)          # Вкл МОД-О
    RLCI.on_UM(1)           # Вкл УМ-О
    RLCI.mode('VS2')        # Уст Симв Скор VS2
    RLCI.mode('M1')         # Уст реж М-1
    inputG('КПА запиши файл режим M1-VS2')
    RLCI.mode('M2')         # Уст реж М-2
    inputG('КПА запиши файл режим M2-VS2')
    RLCI.mode('M3')         # Уст реж М-3
    inputG('КПА запиши файл режим M3-VS2')
    RLCI.mode('M4')         # Уст реж М-4
    inputG('КПА запиши файл режим M4-VS2')
    RLCI.mode('on imFIP')  # Вкл ИМ-ФИП
    RLCI.mode('RS485-1')    # RS485-0
    RLCI.mode('off imFIP')  # Откл ИМ-Фип
    RLCI.mode('on imMOD')   # Вкл ИМ-Мод
    RLCI.mode('off imMOD')  # Откл ИМ-Мод
    RLCI.off_UM()           # Откл УМ
    RLCI.off_MOD()          # Откл Мод
    RLCI.off_FIP()          # Откл Фип
    RLCI.off_PCH()          # Откл Пч
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 8 ЗВЕРШЕН', 1)


def TEST_11():
    yprint('ТЕСТ 11: БА-О(ЭА332), ПЧ-О(ЭА331), ФИП-О(ЭА330), МОД-О(ЭА331), УМ-О(ЭА331)', 1)
    RLCI.power_on_ea332(1)
    RLCI.power_on_ea331(1)
    RLCI.on_PCH(1)      # Вкл ПЧ-О
    RLCI.on_FIP(1)      # Вкл ФИП-О
    RLCI.on_MOD(1)      # Вкл МОД-О
    RLCI.on_UM(1)       # Вкл УМ-О
    RLCI.mode('VS1')    # Уст Симв Скор VS1
    RLCI.mode('M1')     # Уст реж М-1
    sleep(12 * 60 + 30)
    executeTMI(doEquation('10.01.BA_FIP1', '@K', 'off') + " and " +
               doEquation('10.01.BA_MOD1', '@K', 'off') + " and " +
               doEquation('10.01.BA_PCH1', '@K', 'off') + " and " +
               doEquation('10.01.BA_UM1', '@K', 'off') + " and " +
               doEquation('10.01.FIP1_BS', '@K', 'off') + " and " +
               doEquation('10.01.FIP_MOD1_CONNECT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_MOD1_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH1_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH1_P_SYNT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH1_F_SYNT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH1_P', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH1_F', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM1_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM1_P', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM1_P_Out', '@K', 'off'), count=1)
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 11 ЗВЕРШЕН', 1)


def TEST_12():
    yprint('ТЕСТ 12: БА-Р(ЭА332), ПЧ-Р(ЭА331), ФИП-Р(ЭА330), МОД-Р(ЭА331), УМ-Р(ЭА331)', 1)
    RLCI.power_on_ea332(2)
    RLCI.power_on_ea331(2)
    RLCI.on_PCH(2)      # Вкл ПЧ-Р
    RLCI.on_FIP(2)      # Вкл ФИП-Р
    RLCI.on_MOD(2)      # Вкл МОД-Р
    RLCI.on_UM(2)       # Вкл УМ-Р
    RLCI.mode('VS2')    # Уст Симв Скор VS2
    RLCI.mode('M1')     # Уст реж М-1
    sleep(12 * 60 + 30)
    executeTMI(doEquation('10.01.BA_FIP2', '@K', 'off') + " and " +
               doEquation('10.01.BA_MOD2', '@K', 'off') + " and " +
               doEquation('10.01.BA_PCH2', '@K', 'off') + " and " +
               doEquation('10.01.BA_UM2', '@K', 'off') + " and " +
               doEquation('10.01.FIP2_BS', '@K', 'off') + " and " +
               doEquation('10.01.FIP_MOD2_CONNECT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_MOD2_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH2_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH2_P_SYNT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH2_F_SYNT', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH2_P', '@K', 'off') + " and " +
               doEquation('10.01.PRD_PCH2_F', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM2_BS', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM2_P', '@K', 'off') + " and " +
               doEquation('10.01.PRD_UM2_P_Out', '@K', 'off'), count=1)
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 12 ЗВЕРШЕН', 1)


# TODO: заменить исп тестов 5 и 6, там некорректные блоки
#  т.к. нет теста где все блоки 2
def TEST_13():
    yprint('ТЕСТ 13 аварийное отключение')
    RLCI.power_on_ea332(1)
    RLCI.power_on_ea331(1)
    RLCI.mode('RS485-1')    # RS485-0
    RLCI.on_PCH(1)          # Вкл ПЧ-О
    RLCI.on_FIP(1)          # Вкл ФИП-О
    RLCI.on_MOD(1)          # Вкл МОД-О
    RLCI.on_UM(1)           # Вкл УМ-О
    sleep(10)
    yprint('СНЯТЬ ПИТАНИЕ ФКП - АВАРИЙНОЕ ОТКЛЮЧЕНИ')
    inputG('Снять питание?')
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    sleep(10)
    yprint('ПРОВЕРКА ВКЛЮЧЕНИЯ')
    inputG('Начать проверку?')
    TEST_5()
    yprint('ТЕСТ 13 ЗВЕРШЕН', 1)


def TEST_14():
    yprint('ТЕСТ 14 аварийное отключение')
    RLCI.power_on_ea332(2)
    RLCI.power_on_ea331(2)
    RLCI.mode('RS485-1')  # RS485-0
    RLCI.on_PCH(2)  # Вкл ПЧ-Р
    RLCI.on_FIP(2)  # Вкл ФИП-Р
    RLCI.on_MOD(2)  # Вкл МОД-Р
    RLCI.on_UM(2)  # Вкл УМ-Р
    sleep(10)
    yprint('СНЯТЬ ПИТАНИЕ ФКП - АВАРИЙНОЕ ОТКЛЮЧЕНИ')
    inputG('Снять питание?')
    RLCI.power_off_ea331()
    RLCI.power_off_ea332()
    sleep(10)
    yprint('ПРОВЕРКА ВКЛЮЧЕНИЯ')
    inputG('Начать проверку?')
    TEST_6(ea332=2)
    yprint('ТЕСТ 13 ЗВЕРШЕН', 1)


############################## ANTENNA TEST ###############################
def TEST_1():
    yprint('ТЕСТ 1 АФУ-Х ПРОВЕРКА ОСТАНОВКИ ШД - БА-О')
    RLCI.power_on_ea332(1, stop_shd=False, ask_TMI=False)
    sleep(10)
    RLCI.mode('stop SHD', valid_di=False)
    # sendFromJson(SCPICMD, 0xA018)  # ОСТАН ШД
    RLCI.waitAntennaStop(period=60, toPrint=False)  # ожидание на остановку антенны
    RLCI.power_off_ea332()
    yprint('ТЕСТ 1 ЗВЕРШЕН', 1)


def TEST_2():
    yprint('ТЕСТ 2 АФУ-Х ПРОВЕРКА ОСТАНОВКИ ШД - БА-Р')
    RLCI.power_on_ea332(2, stop_shd=False, ask_TMI=False)
    sleep(10)
    RLCI.mode('stop SHD', valid_di=False)
    # sendFromJson(SCPICMD, 0xA018)  # ОСТАН ШД
    RLCI.waitAntennaStop(period=60, toPrint=False)  # ожидание на остановку антенны
    RLCI.power_off_ea332()
    yprint('ТЕСТ 2 ЗВЕРШЕН', 1)


def __TEST_3_4():
    RLCI.isAntennaMoving()  # проверка что антенна движется
    RLCI.waitAntennaStop(period=5*60, toPrint=False)  # ожидание на остановку антенны
    executeTMI("{10.01.BA_AFU_DNP_OZ}==0" + " and " +  # првоерка параметров ДНП и имулсьсов НЗ
               "{10.01.BA_AFU_DNP_OX}==0")
    # Отправить массив НЗ 500
    RLCI.sendArrayToAntenna('КПА', CPIMD(addr=0x0,
                                         data=AsciiHex(
                                             '0x80500450F401F401640064803200C8000A002C01140084830A0000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                                             'A0500550F40158026400C88032002C01140064001E00848314000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                                             '0000000000000000000000000000000000000000000000000000000000000000000000'),
                                         std=2))
    sleep(5)
    RLCI.waitAntennaStop(period=60 + 40, toPrint=False)  # ожидание когда антенна остановится в 0 градусной зоне
    executeTMI("{10.01.BA_AFU_IMP_OZ}@H==500" + " and " +  # проверка координат 0 градуснйо зоны
               "{10.01.BA_AFU_IMP_OX}@H==500" + " and " +
               "{10.01.BA_AFU_NP_OZ}@H==0" + " and " +
               "{10.01.BA_AFU_NP_OX}@H==0")
    # Запустить отработку массива
    # sendFromJson(SCPICMD, 0xA017)  # ПУСК ШД
    RLCI.mode('start SHD')
    # RLCI.isAntennaMoving()  # проверка что антенна движется
    RLCI.waitAntennaStop(period=5 * 60, toPrint=False)  # ожидание когда антенна остановится, или sleep(посчитать время)
    executeTMI("{10.01.BA_AFU_IMP_OZ}@H==@same@all" + " and " +  # Проверка НП и ДНП после остановки
               "{10.01.BA_AFU_IMP_OX}@H==@same@all" + " and " +
               "{10.01.BA_AFU_NP_OZ}@H==0" + " and " +
               "{10.01.BA_AFU_NP_OX}@H==0" + " and " +
               "{10.01.BA_AFU_DNP_OZ}@H==0" + " and " +
               "{10.01.BA_AFU_DNP_OX}@H==0", count=2, period=8)


def TEST_3():
    yprint('ТЕСТ 3 АФУ-Х ПРОВЕРКА ОТРАБОТКИ МАССИВА, ДНП, НП - БА-О')
    RLCI.power_on_ea332(1, stop_shd=False, ask_TMI=False)
    __TEST_3_4()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 3 ЗВЕРШЕН', 1)


def TEST_4():
    yprint('ТЕСТ 4 АФУ-Х ПРОВЕРКА ОТРАБОТКИ МАССИВА, ДНП, НП - БА-Р')
    RLCI.power_on_ea332(2, stop_shd=False, ask_TMI=False)
    __TEST_3_4()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 4 ЗВЕРШЕН', 1)


def __TEST_9_10():
    RLCI.isAntennaMoving()  # проверка что антенна движется
    RLCI.waitAntennaStop(period=5*60, toPrint=False)  # ожидание на остановку антенны
    executeTMI("{10.01.BA_AFU_DNP_OZ}==0" + " and " +  # првоерка параметров ДНП и имулсьсов НЗ
               "{10.01.BA_AFU_DNP_OX}==0")
    # Отправить массив НЗ 10000
    RLCI.sendArrayToAntenna('КПА', CPIMD(addr=0x0,
                                         data=AsciiHex(
                                             '0x80500450E02E00000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000000000000000000'
                                             'A0500550E02E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                                             '0000000000000000000000000000000000000000000000000000000000000000000000'),
                                         std=2))
    comm_print('Зафиксировать максимальное значение Импульсов 10.01.BA_AFU_IMP_OZ, 10.01.BA_AFU_IMP_OX')
    comm_print('Зафиксировать срабатывание датчиков ДКП 10.01.BA_AFU_DKP_OZ, 10.01.BA_AFU_DKP_OX')
    sleep(90)  # время когда антенна дойдет до ДКП
    executeTMI("{10.01.BA_AFU_IMP_OZ}@H==[8500, 9300]" + " and " +  # проверка координат и ДКП
               "{10.01.BA_AFU_IMP_OX}@H==[8500, 9300]", count=2, period=8)
    RLCI.waitAntennaStop(period=60 * 5, toPrint=False)                   # ждем 5 минут пока антенная вернется в ДНП
    executeTMI("{10.01.BA_AFU_IMP_OZ}@H==@same@all" + " and " +     # Проверка антенна не Движ и ДНП
               "{10.01.BA_AFU_IMP_OX}@H==@same@all" + " and " +
               "{10.01.BA_AFU_DNP_OZ}@H==0" + " and " +
               "{10.01.BA_AFU_DNP_OX}@H==0", count=2, period=8)
    comm_print("Проверь максимальное значение Импульсов 10.01.BA_AFU_IMP_OZ, 10.01.BA_AFU_IMP_OX")


def TEST_9():
    yprint('ТЕСТ 9 АФУ-Х ПРОВЕРКА ОТРАБОТКИ ДКП, КОЛ_ВО ИМПУЛЬСОВ - БА-О')
    RLCI.power_on_ea332(1, stop_shd=False, ask_TMI=False)
    __TEST_9_10()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 9 ЗВЕРШЕН', 1)


def TEST_10():
    yprint('ТЕСТ 10 АФУ-Х ПРОВЕРКА ОТРАБОТКИ ДКП, КОЛ_ВО ИМПУЛЬСОВ - БА-Р')
    RLCI.power_on_ea332(2, stop_shd=False, ask_TMI=False)
    __TEST_9_10()
    RLCI.power_off_ea332()
    yprint('ТЕСТ 10 ЗВЕРШЕН', 1)


############################## DESCRIPTION ###############################
def TEST_DESCRIPTION():
    print(Text.yellow + "ТЕСТ 1" + Text.default + ": АФУ-Х ПРОВЕРКА ОСТАНОВКИ ШД - БА-О;")  # Тест 11 в Тест 1
    print(Text.yellow + "ТЕСТ 2" + Text.default + ": АФУ-Х ПРОВЕРКА ОСТАНОВКИ ШД - БА-Р;")  # Тест 12 в Тест 1
    print(Text.yellow + "ТЕСТ 3" + Text.default + ": АФУ-Х ПРОВЕРКА ОТРАБОТКИ МАССИВА, ДНП, НП - БА-О;")    # Тест 7 в Тест 3
    print(Text.yellow + "ТЕСТ 4" + Text.default + ": АФУ-Х ПРОВЕРКА ОТРАБОТКИ МАССИВА, ДНП, НП - БА-Р;")    # Тест 8 в Тест 4
    print(Text.yellow + "ТЕСТ 5" + Text.default + ": БА-О, все -О блоки, VS1;")      # Тест 1 в Тест 5
    print(Text.yellow + "ТЕСТ 6" + Text.default + ": БА-О, все -Р блоки, VS2;;")     # Тест 2 в Тест 6
    print(Text.yellow + "ТЕСТ 7" + Text.default + ": БА-Р, ПЧ_ФИП-О, МОД_УМ-Р, VS1;")    # Тест 3 в Тест 7
    print(Text.yellow + "ТЕСТ 8" + Text.default + ": БА-Р, ПЧ_ФИП-Р, МОД_УМ-О, VS2;")    # Тест 4 в Тест 8
    print(Text.yellow + "ТЕСТ 9" + Text.default + ": тех - АФУ-Х ПРОВЕРКА ОТРАБОТКИ ДКП, КОЛ_ВО ИМПУЛЬСОВ - БА-О;")
    print(Text.yellow + "ТЕСТ 10" + Text.default + ": те= - АФУ-Х ПРОВЕРКА ОТРАБОТКИ ДКП, КОЛ_ВО ИМПУЛЬСОВ - БА-Р;")
    print(Text.yellow + "ТЕСТ 11" + Text.default + ": тех - ОСНОВНОЙ отключение по 12 минут отключение;") # Тест 5 в 11
    print(Text.yellow + "ТЕСТ 12" + Text.default + ": тех- РЕЗЕРВНЫЙ отключение по 12 минут отключение;") # Тест 6 в 12
    print(Text.yellow + "ТЕСТ 13" + Text.default + ": тех - АВАРИЙНОЕ ОТКЛЮЧЕНИЕ ОСНОВНОЙ;")
    print(Text.yellow + "ТЕСТ 14" + Text.default + ": тех - АВАРИЙНОЕ ОТКЛЮЧЕНИЕ РЕЗЕРВНЫЙ;")


####################################################
################### MAIN ###########################
####################################################
foo = {
    'ON ЭА331-О': lambda: sendFromJson(SCPICMD, 0xE004, AsciiHex('0111010000000000')),        # 0x40D9
    'ON ЭА331-Р': lambda: sendFromJson(SCPICMD, 0xE004, AsciiHex('0111020000000000')),        # 0x41A1
    'OFF ЭА331': lambda: sendFromJson(SCPICMD, 0xE005, AsciiHex('0111000000000000')),         # 0x43F9
    'ON ЭА332-О': lambda: sendFromJson(SCPICMD, 0xE004, AsciiHex('0113010000000000')),        # 0x40DB
    'ON ЭА332-Р': lambda: sendFromJson(SCPICMD, 0xE004, AsciiHex('0113020000000000')),        # 0x41A3
    'OFF ЭА332': lambda: sendFromJson(SCPICMD, 0xE005, AsciiHex('0113000000000000')),         # 0x43FB
    # 'ВКЛ ОПР РЛЦИ-В': lambda: sendFromJson(SCPICMD, 0xE06F, AsciiHex('0x0A01 0000 0000 0000'),
    #                                        describe='Вкл Опр РЛЦИВ'),
    # 'ОТКЛ ОПР РЛЦИ-В': lambda: sendFromJson(SCPICMD, 0xE06F, AsciiHex('0x0A00 0000 0000 0000'),
    #                                         describe='Откл Опр РЛЦИВ'),
    'ON M778B1': lambda: MB.power_on(1),
    'ON M778B2': lambda: MB.power_on(2),
    'OFF M778B': lambda: MB.off(),
    'ОТКЛ АП РЛЦИ-В': lambda: RLCI.off_all(),
    'ТЕСТ 1': lambda: TEST_1(),
    'ТЕСТ 2': lambda: TEST_2(),
    'ТЕСТ 3': lambda: TEST_3(),
    'ТЕСТ 4': lambda: TEST_4(),
    'ТЕСТ 5': lambda: TEST_5(),
    'ТЕСТ 6': lambda: TEST_6(),
    'ТЕСТ 7': lambda: TEST_7(),
    'ТЕСТ 8': lambda: TEST_8(),
    'ТЕСТ 9': lambda: TEST_9(),
    'ТЕСТ 10': lambda: TEST_10(),
    'ТЕСТ 11': lambda: TEST_11(),
    'ТЕСТ 12': lambda: TEST_12(),
    'ТЕСТ 13': lambda: TEST_13(),
    'ТЕСТ 14': lambda: TEST_14(),
    'ПОТОК SOTC': lambda: KIS._barl_run(),
    'ОПИСАНИЕ ТЕСТОВ': lambda: TEST_DESCRIPTION()
}
# кнопки
btns = (('ТЕСТ 1', 'ТЕСТ 2', 'ТЕСТ 3', 'ТЕСТ 4'),       # афу
        ('ТЕСТ 5', 'ТЕСТ 6', 'ТЕСТ 7', 'ТЕСТ 8'),       # рлци
        ('ON ЭА331-О', 'ON ЭА331-Р', 'OFF ЭА331'),      # cmd
        ('ON ЭА332-О', 'ON ЭА332-Р', 'OFF ЭА332'),
        ('ON M778B1', 'ON M778B2', 'OFF M778B'),
        ('ОТКЛ АП РЛЦИ-В', 'ПОТОК SOTC'),
        'ОПИСАНИЕ ТЕСТОВ')


print()
yprint('РЛЦИВ ПМ1', 2)
# KIS._barl_run()
while True:
    print()
    try:
        windowChooser(btnsText=btns, fooDict=foo, labels=['АФУ-Х', 'РЛЦИ-В', 'ЭА331', 'ЭА332', 'M778', '', ''])
    except Exception as ex:
        rprint("ОШИБКА В ТЕСТЕ")
        rprint(traceback.format_exc())


############ ВРУЧНУЮ ###############################
# Массив дойдет до ДКП и обратно, проверяем через 100 сек кол-во отработанных импульсов и ДКП датчики
# Масив НЗ 500
# AsciiHex('0x80500450F401F401640064803200C8000A002C01140084830A0000000000000000000000000000000000000000000000000000000000000000000000000000000000A0500550F40158026400C88032002C01140064001E008483140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')
# Массив НЗ 10000
# AsciiHex('0x80500450E02E00000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000000000000000000A0500550E02E000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')
